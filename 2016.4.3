#include<iostream>
#include<string>
#include<stack>
#include<vector>
#include<sstream>
using namespace std;
int p;
string a;

string standard(string temp)
{
    string ans;
    int flag=0;
    for(unsigned int i=0;i<temp.size();i++)
    {
        if(temp[i]=='/'&&flag==0)
        {
            ans=ans+temp[i];flag=1;
        }
        else if(temp[i]!='/')
        {
            ans=ans+temp[i];flag=0;
        }
    }
    return ans;
}

void check(string str)
{
    string ans;
    if(str.size()==0)
    {
        cout<<a<<endl;
        return ;
    }
    if(str[0]!='/')//从根开始
        str=a+"/"+str;
/*
    vector<string>q;
    for(unsigned int i=0;i<str.size();i++)
    {
        if(str[i]=='/') str[i]=' ';
    }
    stringstream s(str);
    string temp;
    while(s>>temp){
	  	if(temp==".")continue;
	  	if(temp==".."){
	  	    if(!q.empty())q.pop_back();
			continue;
		}
		q.push_back(temp);
    }
    if(q.empty()) cout<<"/";
    else
    {
        for(unsigned int i=0;i<q.size();i++)
            cout<<"/"<<q[i];
    }
    cout<<endl;*/

    stack<string>q;
    string temp;
    if(str[str.size()-1]!='/') str+="/";
    unsigned int i=1;
    while(i<str.size())
    {
        unsigned int n=str.find('/',i);
        if(n!=string::npos)
        {
            temp=str.substr(i,n-i);
            if(temp.compare("..")==0)
            {
                if(q.size()!=0)
                    q.pop();
            }
            else if(temp.compare(".")==0)
            {
            }
            else
            {
                q.push(temp);
            }
            i=n+1;
        }
    }
    if(q.size()!=0){
        for(unsigned int i=0;i<(q.size()-1);)
        {
            ans=q.top()+ans;
            ans='/'+ans;
            q.pop();
        }
        ans=q.top()+ans;
        q.pop();
    }
    ans='/'+ans;
    cout<<ans<<endl;
    return ;
}

int main()
{
    cin>>p>>a;
    cin.get();
    for(int i=0;i<p;i++)
    {
        string temp;
        getline(cin,temp);
        temp=standard(temp);
        check(temp);
    }
    return 0;
}
/*
7
/d2/d3
/d2/d4/f1
/d4/f1
/d1/./f1
/d1///f1
/d1/
///
/d1/../../d2
*/
